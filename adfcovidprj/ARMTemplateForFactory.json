{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfcovidprj"
		},
		"ls_datalakestorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_datalakestorage'"
		},
		"ls_datalakestorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adflearncovid.dfs.core.windows.net/"
		},
		"ls_githubio_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CovidProjPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copyrawdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "sourcejson",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "getMetadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "copyrawdata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "getmeta",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getMetadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(variables('filename'),'coviddata.json'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "testvar",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "ff",
													"value": {
														"value": "@variables('filename')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Data flow1",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "testvar",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dataflow1",
														"type": "DataFlowReference",
														"parameters": {},
														"datasetParameters": {
															"source1": {},
															"sink1": {}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "deletefile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "delfile",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "deletegarbage",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "ls_datalakestorage",
															"type": "LinkedServiceReference"
														},
														"path": "raw/Del_logging"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@variables('delgarbagefile')",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "delfile",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "delgarbagefile",
													"value": {
														"value": "@variables('filename')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"filename": {
						"type": "String"
					},
					"ff": {
						"type": "String"
					},
					"delgarbagefile": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-15T09:30:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcejson')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/getmeta')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/deletegarbage')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "covid19",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Df_jsonflow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "timeseries.json",
						"folderPath": "covid19",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "coviddata.json",
						"folderPath": "bronze",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "timeseries.json",
						"folderPath": "covid19",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowjson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "coviddata.json",
						"folderPath": "bronze",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"infected": {
										"type": "integer"
									},
									"recovered": {
										"type": "integer"
									},
									"latitude": {
										"type": "number"
									},
									"pop": {
										"type": "integer"
									},
									"longitude": {
										"type": "number"
									},
									"name": {
										"type": "string"
									},
									"country": {
										"type": "string"
									},
									"lastUpdated": {
										"type": "string"
									},
									"dead": {
										"type": "integer"
									},
									"sick": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/data",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deletegarbage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "covid19",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getmeta')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalakestorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcejson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_githubio",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "Vishalwe/CovidPrj/refs/heads/main/covidData/data.json"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_githubio')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalakestorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_datalakestorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_datalakestorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_githubio')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_githubio_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataflowjson",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from datalake"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flattenjson"
						},
						{
							"name": "selectcolumns"
						},
						{
							"name": "filterdata"
						},
						{
							"name": "splitdata"
						},
						{
							"name": "Distance"
						},
						{
							"name": "Rank"
						},
						{
							"name": "selectnorecovery"
						},
						{
							"name": "selectrecovery"
						},
						{
							"name": "joindatasets"
						},
						{
							"name": "filterdataonrank",
							"description": "Filtering rows using expressions on columns 'Rank'==1"
						},
						{
							"name": "selectfinalcols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          data as (id as string, infected as integer, recovered as integer, latitude as double, pop as integer, longitude as double, name as string, country as string, lastUpdated as string, dead as integer, sick as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> source1",
						"source1 foldDown(unroll(data),",
						"     mapColumn(",
						"          data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenjson",
						"flattenjson select(mapColumn(",
						"          country = data.country,",
						"          infected = data.infected,",
						"          recovered = data.recovered,",
						"          latitude = data.latitude,",
						"          longitude = data.longitude,",
						"          pop = data.pop,",
						"          name = data.name,",
						"          lastUpdated = data.lastUpdated,",
						"          dead = data.dead,",
						"          sick = data.sick",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumns",
						"selectcolumns filter(greater(infected,50)) ~> filterdata",
						"filterdata split(greater(recovered, 0),",
						"     disjoint: false) ~> splitdata@(splitonerecovery, splittwonorecovery)",
						"joindatasets derive(distance = 6371 * acos(",
						"    cos(latitude * (3.141592653589793 / 180)) *",
						"    cos(latitude_norec * (3.141592653589793 / 180)) *",
						"    cos((longitude_norec - longitude) * (3.141592653589793 / 180)) +",
						"    sin(latitude * (3.141592653589793 / 180)) *",
						"    sin(latitude_norec * (3.141592653589793 / 180))",
						")) ~> Distance",
						"Distance window(over(country),",
						"     asc(distance, true),",
						"     Rank = rank()) ~> Rank",
						"splitdata@splittwonorecovery select(mapColumn(",
						"          country_norec = country,",
						"          infected_norec = infected,",
						"          recovered_norec = recovered,",
						"          latitude_norec = latitude,",
						"          longitude_norec = longitude,",
						"          pop_norec = pop,",
						"          name_norec = name,",
						"          lastUpdated_norec = lastUpdated,",
						"          dead_norec = dead,",
						"          sick_norec = sick",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectnorecovery",
						"splitdata@splitonerecovery select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrecovery",
						"selectrecovery, selectnorecovery join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joindatasets",
						"Rank filter(Rank==1) ~> filterdataonrank",
						"filterdataonrank select(mapColumn(",
						"          country,",
						"          infected,",
						"          recovered,",
						"          latitude,",
						"          longitude,",
						"          pop,",
						"          name,",
						"          lastUpdated,",
						"          dead,",
						"          sick,",
						"          country_norec,",
						"          infected_norec,",
						"          recovered_norec,",
						"          latitude_norec,",
						"          longitude_norec,",
						"          pop_norec,",
						"          name_norec,",
						"          lastUpdated_norec,",
						"          dead_norec,",
						"          sick_norec,",
						"          distance",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectfinalcols",
						"selectfinalcols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataflowjson')]",
				"[concat(variables('factoryId'), '/datasets/sink')]"
			]
		}
	]
}