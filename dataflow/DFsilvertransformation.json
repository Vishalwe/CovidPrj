{
	"name": "DFsilvertransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "goldsrcfile",
						"type": "DatasetReference"
					},
					"name": "sourceSilver"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "goldtansformedfile",
						"type": "DatasetReference"
					},
					"name": "goldsink"
				}
			],
			"transformations": [
				{
					"name": "splitdata"
				},
				{
					"name": "Distance"
				},
				{
					"name": "Rank"
				},
				{
					"name": "selectnorecovery"
				},
				{
					"name": "selectrecovery"
				},
				{
					"name": "joindatasets"
				},
				{
					"name": "filterdataonrank",
					"description": "Filtering rows using expressions on columns 'Rank'==1"
				},
				{
					"name": "selectfinalcols"
				},
				{
					"name": "selectdata"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          infected as integer,",
				"          recovered as integer,",
				"          latitude as double,",
				"          longitude as double,",
				"          pop as integer,",
				"          name as string,",
				"          lastUpdated as string,",
				"          dead as short,",
				"          sick as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceSilver",
				"selectdata split(greater(recovered, 0),",
				"     disjoint: false) ~> splitdata@(splitonerecovery, splittwonorecovery)",
				"joindatasets derive(distance = 6371 * acos(",
				"    cos(latitude * (3.141592653589793 / 180)) *",
				"    cos(latitude_norec * (3.141592653589793 / 180)) *",
				"    cos((longitude_norec - longitude) * (3.141592653589793 / 180)) +",
				"    sin(latitude * (3.141592653589793 / 180)) *",
				"    sin(latitude_norec * (3.141592653589793 / 180))",
				")) ~> Distance",
				"Distance window(over(country),",
				"     asc(distance, true),",
				"     Rank = rank()) ~> Rank",
				"splitdata@splittwonorecovery select(mapColumn(",
				"          country_norec = country,",
				"          infected_norec = infected,",
				"          recovered_norec = recovered,",
				"          latitude_norec = latitude,",
				"          longitude_norec = longitude,",
				"          pop_norec = pop,",
				"          name_norec = name,",
				"          lastUpdated_norec = lastUpdated,",
				"          dead_norec = dead,",
				"          sick_norec = sick",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectnorecovery",
				"splitdata@splitonerecovery select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrecovery",
				"selectrecovery, selectnorecovery join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joindatasets",
				"Rank filter(Rank==1) ~> filterdataonrank",
				"filterdataonrank select(mapColumn(",
				"          country,",
				"          infected,",
				"          recovered,",
				"          latitude,",
				"          longitude,",
				"          pop,",
				"          name,",
				"          lastUpdated,",
				"          dead,",
				"          sick,",
				"          country_norec,",
				"          infected_norec,",
				"          recovered_norec,",
				"          latitude_norec,",
				"          longitude_norec,",
				"          pop_norec,",
				"          name_norec,",
				"          lastUpdated_norec,",
				"          dead_norec,",
				"          sick_norec,",
				"          distance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfinalcols",
				"sourceSilver select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdata",
				"selectfinalcols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> goldsink"
			]
		}
	}
}